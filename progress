import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';

void main() {
  runApp(SweetCreationsApp());
}

class SweetCreationsApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (_) => CartProvider(),
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        home:SplashScreen(),
      ),
    );
  }
}


class SplashScreen extends StatefulWidget {
 @override
 _SplashScreenState createState() => _SplashScreenState();
}
class _SplashScreenState extends State<SplashScreen> with SingleTickerProviderStateMixin {
 late AnimationController _controller;
 late Animation<double> _bounceAnimation;
 @override
 void initState() {
 super.initState();
 _controller = AnimationController(
 duration: Duration(seconds: 2), // Duration of one bounce cycle
 vsync: this,
 );
 _bounceAnimation = Tween<double>(begin: 1.0, end: 1.2)
 .chain(CurveTween(curve: Curves.elasticInOut))
 .animate(_controller);
 _controller.repeat(reverse: true);
 _navigateToLogin();
 }
 // Navigate to the Login screen after a delay
 _navigateToLogin() async {
 await Future.delayed(Duration(seconds: 5)); // Splash screen duration
 Navigator.pushReplacement(
 context,
 MaterialPageRoute(builder: (context) => LoginScreen()),
 );
 }
 @override
 void dispose() {
 _controller.dispose();
 super.dispose();
 }
 @override
 Widget build(BuildContext context) {
 return Scaffold(
 body: Container(
 decoration: BoxDecoration(
 gradient: LinearGradient(
 begin: Alignment.bottomRight,
 end: Alignment.topLeft,
 colors: [Colors.pink, Colors.blue],
 ),
 ),
 child: Center(
 child: Column(
 mainAxisAlignment: MainAxisAlignment.center,
 children: [
 AnimatedBuilder(
 animation: _bounceAnimation,
 builder: (context, child) {
 return Transform.scale(
 scale: _bounceAnimation.value,
 child: Image.network(
 'https://res.cloudinary.com/dn38ffinf/image/upload/v1733118295/logo_pkdaas.png',
 width: 200,
 height: 200,
 fit: BoxFit.cover,
 ),
 );
 },
 ),
 SizedBox(height: 20),
 Text(
 'Sweet Creations',
 style: TextStyle(
 fontSize: 24,
 fontWeight: FontWeight.bold,
 color: Colors.white,
 ),
 ),
 ],
 ),
 ),
 ),
 );
 }
}
class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  bool _isPasswordVisible = false;
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  // Function to validate login credentials and navigate to the Home screen
  void _validateAndLogin() {
    String email = _emailController.text.trim();
    String password = _passwordController.text.trim();

    if (email.isEmpty || password.isEmpty) {
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('Input Required'),
          content: const Text('Please enter both email and password to proceed.'),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('OK'),
            ),
          ],
        ),
      );
    } else {
      // Navigate to Home Screen after successful login
      _navigateToHomeScreen(email);
    }
  }

  // Function to navigate to Home screen
 void _navigateToHomeScreen(String email) {
  Navigator.pushReplacement(
    context,
    MaterialPageRoute(
      builder: (context) => Main(
       
      ),
    ),
  );
}

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.bottomRight,
            end: Alignment.topLeft,
            colors: [Colors.pink, Colors.blue],
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Image.network(
                  'https://res.cloudinary.com/dn38ffinf/image/upload/v1733118295/logo_pkdaas.png',
                  width: 100,
                  height: 100,
                  fit: BoxFit.cover,
                ),
                const SizedBox(height: 10),
                const Text(
                  'Sweet Creations',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 20),
                TextField(
                  controller: _emailController,
                  keyboardType: TextInputType.emailAddress,
                  decoration: InputDecoration(
                    labelText: 'Email',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                    filled: true,
                    fillColor: Colors.white,
                  ),
                ),
                const SizedBox(height: 16),
                TextField(
                  controller: _passwordController,
                  obscureText: !_isPasswordVisible,
                  decoration: InputDecoration(
                    labelText: 'Password',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                    filled: true,
                    fillColor: Colors.white,
                    suffixIcon: IconButton(
                      icon: Icon(
                        _isPasswordVisible ? Icons.visibility_off : Icons.visibility,
                      ),
                      onPressed: () {
                        setState(() {
                          _isPasswordVisible = !_isPasswordVisible;
                        });
                      },
                    ),
                  ),
                ),
                Align(
                  alignment: Alignment.centerRight,
                  child: TextButton(
                    onPressed: () {},
                    child: const Text('Forgot password?'),
                  ),
                ),
                const SizedBox(height: 20),
                ElevatedButton(
                  onPressed: _validateAndLogin,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    minimumSize: const Size(double.infinity, 50),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                  ),
                  child: const Text(
                    'Login',
                    style: TextStyle(fontSize: 18, color: Colors.white),
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Text("Don't have an account? "),
                    GestureDetector(
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const SignUpPage(),
                          ),
                        );
                      },
                      child: const Text(
                        'Sign up',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: Colors.blue,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class LoginPage extends StatelessWidget {
 const LoginPage({Key? key}) : super(key: key);
 @override
 Widget build(BuildContext context) {
 return Scaffold(
 appBar: AppBar(
 title: const Text('Login Page'),
 backgroundColor: Colors.teal,
 ),
 body: Center(
 child: Column(
 mainAxisAlignment: MainAxisAlignment.center,
 children: [
 const Text(
 'Welcome to the Login Page',
 style: TextStyle(fontSize: 20),
 ),
 const SizedBox(height: 20),
 Row(
 mainAxisAlignment: MainAxisAlignment.center,
 children: [
 const Text("Don't have an account? "),
 GestureDetector(
 onTap: () {
 // Navigate to the Sign Up Page
 Navigator.push(
 context,
 MaterialPageRoute(
 builder: (context) => const SignUpPage(),
 ),
 );
 },
 child: const Text(
 'Sign up',
 style: TextStyle(
 fontWeight: FontWeight.bold,
 color: Colors.blue,
 ),
 ),
 ),
 ],
 ),
 ],
 ),
 ),
 );
 }
}
class SignUpPage extends StatelessWidget {
 const SignUpPage({Key? key}) : super(key: key);
 @override
 Widget build(BuildContext context) {
 return Scaffold(
 appBar: AppBar(
 title: const Text('Sign Up Page'),
 backgroundColor: Colors.teal,
 ),
 body: Center(
 child: Column(
 mainAxisAlignment: MainAxisAlignment.center,
 children: [
 const Text(
 'Welcome to the Sign Up Page',
 style: TextStyle(fontSize: 20),
 ),
 const SizedBox(height: 20),
 ElevatedButton(
 onPressed: () {
 // Navigate back to the Login Page
 Navigator.pop(context);
 },
 child: const Text('Back to Login'),
 ),
 ],
 ),
 ),
 );
 }
}



class SweetCreationHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.bottomRight,
            end: Alignment.topLeft,
            colors: [Colors.pink, Colors.blue],
          ),
        ),
        child: Column(
          children: [
            Expanded(
              flex: 4,
              child: Stack(
                children: [
                  // Background Container with Image
                  Container(
                    height: 400, // Set desired height
                    width: double.infinity, // Full screen width
                    decoration: BoxDecoration(
                      image: DecorationImage(
                        image: NetworkImage(
                          'https://res.cloudinary.com/dfug69cus/image/upload/v1733239863/ca_jlkfgo.jpg',
                        ),
                        fit: BoxFit.cover, // Ensures the image covers the area
                      ),
                      borderRadius: BorderRadius.only(
                        bottomLeft: Radius.circular(50),
                        bottomRight: Radius.circular(50),
                      ),
                    ),
                  ),
                  // Overlay Content
                  Align(
                    alignment: Alignment.center,
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 20.0),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const SizedBox(height: 20),
                          Text(
                            'Sweet Creation Cakes',
                            style: TextStyle(
                              fontSize: 28,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                          const SizedBox(height: 10),
                          Text(
                            'Crafting sweet memories, one cake at a time',
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              fontSize: 16,
                              color: Colors.white70,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
            // Explore Section
            Expanded(
              flex: 3,
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20.0),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      'Explore Our Creations',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.black87,
                      ),
                    ),
                    const SizedBox(height: 10),
                    Text(
                      'Find the perfect cake for your celebrations with our wide variety of designs and flavors.',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 16,
                color: Colors.black.withOpacity(0.6), // Adjust opacity as needed
                      ),
                    ),
                  ],
                ),
              ),
            ),
            // Navigation Button
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 30.0, vertical: 20.0),
              child: _buildNavigationButton(context, 'Discover Now', Main()),
            ),
          ],
        ),
      ),
    );
  }

  // Custom Navigation Button Widget
  Widget _buildNavigationButton(BuildContext context, String label, Widget destination) {
    return ElevatedButton(
      onPressed: () {
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => destination),
        );
      },
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.pink.shade300,
        padding: EdgeInsets.symmetric(vertical: 15),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(25),
        ),
      ),
      child: Center(
        child: Text(
          label,
          style: TextStyle(fontSize: 18, color: Colors.white),
        ),
      ),
    );
  }
}





class SignUp extends StatelessWidget {
 final TextEditingController usernameController = TextEditingController();
 final TextEditingController emailController = TextEditingController();
 final TextEditingController passwordController = TextEditingController();
 final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
 @override
 Widget build(BuildContext context) {
 return MaterialApp(
 debugShowCheckedModeBanner: false,
 home: Scaffold(
 appBar: AppBar(
 title: Text('Sign Up'),
 backgroundColor: Colors.blueAccent,
 ),
 body: Padding(
 padding: const EdgeInsets.all(16.0),
 child: SingleChildScrollView(
 child: Form(
 key: _formKey,
 child: Column(
 crossAxisAlignment: CrossAxisAlignment.stretch,
 children: [
 // Username Field
 TextFormField(
 controller: usernameController,
 decoration: InputDecoration(
 labelText: 'Username',
 hintText: 'Enter your username',
 border: OutlineInputBorder(),
 ),
 validator: (value) {
 if (value == null || value.isEmpty) {
 return 'Please enter your username';
 }
 return null;
 },
 ),
 SizedBox(height: 16),
 // Email Field
 TextFormField(
 controller: emailController,
 decoration: InputDecoration(
 labelText: 'Email',
 hintText: 'Enter your email',
 border: OutlineInputBorder(),
 ),
 keyboardType: TextInputType.emailAddress,
 validator: (value) {
 if (value == null || value.isEmpty) {
 return 'Please enter your email';
 }
 // Simple email validation
 final emailRegex = RegExp(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$');
 if (!emailRegex.hasMatch(value)) {
 return 'Please enter a valid email';
 }
 return null;
 },
 ),
 SizedBox(height: 16),
 // Password Field
 TextFormField(
 controller: passwordController,
 obscureText: true,
 decoration: InputDecoration(
 labelText: 'Password',
 hintText: 'Enter your password',
 border: OutlineInputBorder(),
 ),
 validator: (value) {
 if (value == null || value.isEmpty) {
 return 'Please enter your password';
 }
 if (value.length < 6) {
 return 'Password must be at least 6 characters';
 }
 return null;
 },
 ),
 SizedBox(height: 24),
 // Sign Up Button
 ElevatedButton(
 onPressed: () {
 if (_formKey.currentState!.validate()) {
 // If the form is valid, display a message
 ScaffoldMessenger.of(context).showSnackBar(SnackBar(
 content: Text('Processing Data...'),
 ));
 }
 },
 child: Text('Sign Up'),
 style: ElevatedButton.styleFrom(
 backgroundColor: Colors.blueAccent, // Use backgroundColor instead of primary
 padding: EdgeInsets.symmetric(vertical: 16),
 shape: RoundedRectangleBorder(
 borderRadius: BorderRadius.circular(10), // Optional: rounded corners
 ),
 ),
)
 
 ],
 ),
 ),
 ),
 ),
 ),
 );
 }
}





class Main extends StatefulWidget {
  const Main({Key? key}) : super(key: key);

  @override
  _MainPageState createState() => _MainPageState();
}

class _MainPageState extends State<Main> {
  int _selectedIndex = 0;

  // Define the name and email (this should be dynamic based on the user)
  final String name = 'John Doe'; // Example name
  final String email = 'john.doe@example.com'; // Example email

  // List of pages corresponding to the BottomNavigationBar items
  final List<Widget> _pages = [
    CakeRushHomePage(), // Make sure CakeRushHomePage is defined
    InboxPage(),        // Make sure InboxPage is defined
    ProfilePage(
      email: 'john.doe@example.com', // Pass email here
      name: 'John Doe',               // Pass name here
    ),
  ];

  // Method to handle BottomNavigationBar item taps
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;  // Update the selected index when a tab is tapped
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _pages[_selectedIndex],  // Display the page corresponding to the selected tab
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,  // Set the currently selected tab
        onTap: _onItemTapped,         // Call the method when a tab is tapped
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.inbox),
            label: 'Inbox',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: 'Profile',
          ),
        ],
        selectedItemColor: Colors.teal,
        unselectedItemColor: Colors.grey,
      ),
    );
  }
}






class CartItem {
  final String image;
  final String title;
  final String description;
  final String price;

  CartItem({required this.image, required this.title, required this.description, required this.price});
}

class CartProvider with ChangeNotifier {
  List<CartItem> _cartItems = [];
  String _selectedPaymentMethod = 'Full Payment'; // Default payment method
  int _quantity = 1; // Quantity of the cake
  String _price = '₱1,799.00'; // Default price for demonstration

  List<CartItem> get cartItems => _cartItems;
  int get itemCount => _cartItems.length;
  String get selectedPaymentMethod => _selectedPaymentMethod;

  int get quantity => _quantity;
  String get price => _price;

  // Setters and getters for payment method and price splitting
  void setSelectedPaymentMethod(String method) {
    _selectedPaymentMethod = method;
    notifyListeners();
  }

  void setQuantity(int newQuantity) {
    _quantity = newQuantity;
    notifyListeners();
  }

  void addToCart(CartItem item) {
    _cartItems.add(item);
    notifyListeners();
  }

  void removeFromCart(CartItem item) {
    _cartItems.remove(item);
    notifyListeners();
  }

  String get finalPrice {
    double priceValue = double.parse(_price.replaceAll(RegExp('[^0-9.]'), ''));
    if (_selectedPaymentMethod == 'Half Payment') {
      return '₱${(priceValue / 2).toStringAsFixed(2)}';
    }
    return _price;
  }

  void buyNow(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Confirm Purchase'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Are you sure you want to buy now?'),
              const SizedBox(height: 16),
              _DeliveryDateTimeSelector(),
              const SizedBox(height: 16),
              _QuantitySelector(),
              const SizedBox(height: 16),
              _MessageBox(),
              const SizedBox(height: 16),
              PaymentMethodSelector(onPaymentSelected: setSelectedPaymentMethod),
              const SizedBox(height: 8),
              Text('Price: ${finalPrice}'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                notifyListeners();
                Navigator.of(context).pop(); // Close the dialog
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        'Order confirmed with $_selectedPaymentMethod and processed successfully!'),
                  ),
                );
              },
              child: Text('Confirm Order'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close the dialog without any action
              },
              child: Text('Cancel'),
            ),
          ],
        );
      },
    );
  }
}

class _DeliveryDateTimeSelector extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text('Select Delivery Date:'),
        InkWell(
          onTap: () async {
            DateTime? pickedDate = await showDatePicker(
              context: context,
              initialDate: DateTime.now(),
              firstDate: DateTime.now(),
              lastDate: DateTime(2101),
            );

            if (pickedDate != null) {
              // Update state with selected date
              // For simplicity, we're just showing the date
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Selected date: ${DateFormat.yMd().format(pickedDate)}')),
              );
            }
          },
          child: Container(
            padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
            decoration: BoxDecoration(
              color: Colors.blue.shade50,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text('Choose Date'),
          ),
        ),
        SizedBox(height: 16),
        Text('Select Delivery Time:'),
        InkWell(
          onTap: () async {
            TimeOfDay? pickedTime = await showTimePicker(
              context: context,
              initialTime: TimeOfDay.now(),
            );

            if (pickedTime != null) {
              // Update state with selected time
              // For simplicity, we're just showing the time
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Selected time: ${pickedTime.format(context)}')),
              );
            }
          },
          child: Container(
            padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
            decoration: BoxDecoration(
              color: Colors.blue.shade50,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text('Choose Time'),
          ),
        ),
      ],
    );
  }
}

class _QuantitySelector extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    int _quantity = 1; // Default quantity

    return Column(
      children: [
        Text('Select Quantity:'),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () {
                if (_quantity > 1) {
                  _quantity--;
                }
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Quantity: $_quantity')),
                );
              },
              child: Text('-'),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Text('$_quantity'),
            ),
            ElevatedButton(
              onPressed: () {
                _quantity++;
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Quantity: $_quantity')),
                );
              },
              child: Text('+'),
            ),
          ],
        ),
      ],
    );
  }
}

class _MessageBox extends StatelessWidget {
  final TextEditingController _messageController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text('Special Message:'),
        TextField(
          controller: _messageController,
          decoration: InputDecoration(
            border: OutlineInputBorder(),
            hintText: 'Type your message here...',
          ),
        ),
      ],
    );
  }
}




class CakeRushHomePage extends StatefulWidget {
  @override
  _CakeRushHomePageState createState() => _CakeRushHomePageState();
}

class _CakeRushHomePageState extends State<CakeRushHomePage> {
  String _searchText = '';
   final List<Map<String, String>> products = [
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733472968/1_vrnymz.jpg', 'title': 'Cake Explosion Gift Box', 'description': 'CakeRush Philippines', 'price': '₱1,799.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733473181/2_fr02qr.jpg', 'title': 'Love Explosion Gift Box', 'description': 'CakeRush Philippines', 'price': '₱1,799.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733473193/3_f0xxac.jpg', 'title': 'Barrel Of Festivities', 'description': "AJ's Cake and Pastries", 'price': '₱1,649.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733473199/4_plf8wi.jpg', 'title': 'Ube Sans Rival Cake', 'description': 'Sweet Success', 'price': 'from ₱1,599.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733473312/5_u8msev.jpg', 'title': 'Strawberry Dream Cake', 'description': 'Cake Factory', 'price': '₱1,299.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733473323/6_oogso1.jpg', 'title': 'Strawberry Cake', 'description': 'Happy Cakes', 'price': '₱1,499.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733473719/7_gndm9j.jpg', 'title': 'Strawberry Shortcake', 'description': 'Berry Sweet', 'price': '₱1,899.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733473728/8_x6avah.jpg', 'title': 'Red Velvet Delight', 'description': 'Sweet Delights', 'price': '₱1,749.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733493316/blue_a2hglz.jpg', 'title': 'Blueberry Cheesecake', 'description': 'Cheesecake Factory', 'price': '₱1,599.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733493339/carrot_hz9mfl.jpg', 'title': 'Carrot Walnut Cake', 'description': 'Healthy Bakes', 'price': '₱1,699.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733493349/cholate_e8t8qr.jpg', 'title': 'Chocolate Fudge Cake', 'description': 'Decadent Desserts', 'price': '₱1,499.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733493421/pine_vznkyp.jpg', 'title': 'Pineapple Upside Down Cake', 'description': 'Tropical Treats', 'price': '₱1,599.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733493326/cake_orayz8.jpg', 'title': 'Classic Tiramisu', 'description': 'Italian Bakery', 'price': '₱1,699.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733493359/mango_cfdq33.jpg', 'title': 'Mango Cream Cake', 'description': 'Summer Sweets', 'price': '₱1,799.00'},
    {'image': 'https://res.cloudinary.com/dfug69cus/image/upload/v1733493405/matcha_p2i73l.jpg', 'title': 'Matcha Green Tea Cake', 'description': 'Zen Bakery', 'price': '₱1,899.00'},
  ];
  @override
  Widget build(BuildContext context) {
    final cartProvider = Provider.of<CartProvider>(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Sweet Creation'),
        backgroundColor: Colors.pink,
        actions: [
          Stack(
            children: [
              IconButton(
                icon: const Icon(Icons.add_shopping_cart),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => CartPage()),
                  );
                },
              ),
              if (cartProvider.itemCount > 0)
                Positioned(
                  right: 8,
                  top: 8,
                  child: CircleAvatar(
                    backgroundColor: Colors.red,
                    radius: 10,
                    child: Text(
                      '${cartProvider.itemCount}',
                      style: const TextStyle(color: Colors.white, fontSize: 12),
                    ),
                  ),
                ),
            ],
          ),
        ],
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.pink, Colors.blue],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Column(
          children: [
            // Search Bar
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: TextField(
                onChanged: (value) {
                  setState(() {
                    _searchText = value.toLowerCase();
                  });
                },
                decoration: InputDecoration(
                  prefixIcon: const Icon(Icons.search),
                  hintText: 'Search cakes and sweets...',
                  filled: true,
                  fillColor: Colors.white,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(30),
                    borderSide: BorderSide.none,
                  ),
                ),
              ),
            ),
            // Product Grid
            Expanded(
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 8.0),
                child: GridView.builder(
                  itemCount: products.length,
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    childAspectRatio: 0.75,
                    crossAxisSpacing: 8,
                    mainAxisSpacing: 8,
                  ),
                  itemBuilder: (context, index) {
                    final product = products[index];
                    if (_searchText.isNotEmpty &&
                        !product['title']!.toLowerCase().contains(_searchText)) {
                      return const SizedBox.shrink();
                    }
                    return GestureDetector(
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => ProductDetailsPage(product: product),
                          ),
                        );
                      },
                      child: Card(
                        elevation: 3,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: [
                            Expanded(
                              child: ClipRRect(
                                borderRadius: const BorderRadius.vertical(
                                  top: Radius.circular(10),
                                ),
                                child: Image.network(
                                  product['image']!,
                                  fit: BoxFit.cover,
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.all(8.0),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    product['title']!,
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                    ),
                                    maxLines: 2,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                  const SizedBox(height: 4),
                                  Text(
                                    product['description']!,
                                    style: TextStyle(
                                      color: Colors.grey[600],
                                      fontSize: 12,
                                    ),
                                  ),
                                  const SizedBox(height: 8),
                                  Text(
                                    product['price']!,
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                      color: Colors.teal,
                                    ),
                                  ),
                                  const SizedBox(height: 8),
                                  ElevatedButton(
                                    onPressed: () {
                                      cartProvider.addToCart(
                                        CartItem(
                                          image: product['image']!,
                                          title: product['title']!,
                                          description: product['description']!,
                                          price: product['price']!,
                                        ),
                                      );
                                    },
                                    child: const Text('Add to Cart'),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class ProductDetailsPage extends StatelessWidget {
  final Map<String, String> product;

  const ProductDetailsPage({Key? key, required this.product}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final cartProvider = Provider.of<CartProvider>(context);
    return Scaffold(
      appBar: AppBar(
        title: Text(product['title']!),
        backgroundColor: Colors.pink,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: Image.network(
                product['image']!,
                width: double.infinity, // Full width
                height: 200, // Adjusted height
                fit: BoxFit.cover, // Image fit
              ),
            ),
            const SizedBox(height: 16),
            Text(
              product['title']!,
              style: const TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              product['description']!,
              style: const TextStyle(fontSize: 16, color: Colors.grey),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            Text(
              product['price']!,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.teal,
              ),
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton(
                  onPressed: () {
                    cartProvider.addToCart(
                      CartItem(
                        image: product['image']!,
                        title: product['title']!,
                        description: product['description']!,
                        price: product['price']!,
                      ),
                    );
                  },
                  child: const Text('Add to Cart'),
                ),
                const SizedBox(width: 16),
                ElevatedButton(
                  onPressed: () {
                    cartProvider.buyNow(context);
                  },
                  child: const Text('Buy Now'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

class CartPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final cartProvider = Provider.of<CartProvider>(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Cart'),
        backgroundColor: Colors.pink,
      ),
      body: ListView.builder(
        itemCount: cartProvider.cartItems.length,
        itemBuilder: (context, index) {
          final item = cartProvider.cartItems[index];
          return ListTile(
            leading: Image.network(item.image),
            title: Text(item.title),
            subtitle: Text(item.description),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(item.price),
                IconButton(
                  icon: const Icon(Icons.remove_circle_outline),
                  onPressed: () {
                    cartProvider.removeFromCart(item);
                  },
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

class InboxPage extends StatelessWidget {
  final List<Map<String, String>> chats = [
    {'name': 'Alice', 'lastMessage': 'Hey there!', 'timestamp': '10:45 AM'},
    {'name': 'Bob', 'lastMessage': 'What\'s up?', 'timestamp': 'Yesterday'},
    {'name': 'Charlie', 'lastMessage': 'Good morning!', 'timestamp': '12:30 PM'},
    // Add more chat data as needed
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Inbox'),
        backgroundColor: Colors.pink,
      ),
      body: ListView.builder(
        itemCount: chats.length,
        itemBuilder: (context, index) {
          final chat = chats[index];
          return GestureDetector(
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => ChatDetailsPage(chat: chat),
                ),
              );
            },
            child: ListTile(
              leading: CircleAvatar(
                backgroundColor: Colors.grey[200],
                child: Text(chat['name']![0], style: TextStyle(fontSize: 24)),
              ),
              title: Text(chat['name']!),
              subtitle: Text(chat['lastMessage']!),
              trailing: Text(chat['timestamp']!, style: TextStyle(fontSize: 12, color: Colors.grey)),
            ),
          );
        },
      ),
    );
  }
}

class ChatDetailsPage extends StatefulWidget {
  final Map<String, String> chat;

  ChatDetailsPage({required this.chat});

  @override
  _ChatDetailsPageState createState() => _ChatDetailsPageState();
}

class _ChatDetailsPageState extends State<ChatDetailsPage> {
  List<ChatMessageData> messages = [
    ChatMessageData(sender: 'Alice', message: 'Hey there!', timestamp: '10:45 AM', isSent: true),
    ChatMessageData(sender: 'You', message: 'Hello!', timestamp: '10:46 AM', isSent: false),
  ];

  TextEditingController _messageController = TextEditingController();

  void _sendMessage() {
    if (_messageController.text.isNotEmpty) {
      setState(() {
        messages.add(ChatMessageData(
          sender: 'You',
          message: _messageController.text,
          timestamp: 'Now', // Replace with actual timestamp if needed
          isSent: false,
        ));
      });
      _messageController.clear(); // Clear the input field after sending
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.chat['name']!),
        backgroundColor: Colors.pink,
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.all(8.0),
              itemCount: messages.length,
              itemBuilder: (context, index) {
                final message = messages[index];
                return ChatMessage(
                  sender: message.sender,
                  message: message.message,
                  timestamp: message.timestamp,
                  isSent: message.isSent,
                );
              },
            ),
          ),
          Divider(),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _messageController,
                    decoration: InputDecoration(
                      hintText: 'Type a message...',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(30),
                        borderSide: BorderSide.none,
                      ),
                      filled: true,
                      fillColor: Colors.grey[200],
                      contentPadding: const EdgeInsets.symmetric(horizontal: 16),
                    ),
                  ),
                ),
                IconButton(
                  icon: Icon(Icons.send, color: Colors.pink),
                  onPressed: _sendMessage,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class ChatMessage extends StatelessWidget {
  final String sender;
  final String message;
  final String timestamp;
  final bool isSent;

  ChatMessage({required this.sender, required this.message, required this.timestamp, required this.isSent});

  @override
  Widget build(BuildContext context) {
    // Align the message based on whether it is sent or received
    return Row(
      mainAxisAlignment: isSent ? MainAxisAlignment.end : MainAxisAlignment.start,
      children: [
        // Show avatar only for received messages
        !isSent
            ? CircleAvatar(
                backgroundColor: Colors.grey[200],
                child: Text(sender[0], style: TextStyle(fontSize: 24)),
              )
            : SizedBox.shrink(), // No avatar for sent messages

        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 8.0),
          child: Column(
            crossAxisAlignment: isSent ? CrossAxisAlignment.end : CrossAxisAlignment.start,
            children: [
              // Message text
              Container(
                padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
                decoration: BoxDecoration(
                  color: isSent ? Colors.pink : Colors.grey[300],
                  borderRadius: BorderRadius.circular(15),
                ),
                child: Text(
                  message,
                  style: TextStyle(
                    color: isSent ? Colors.white : Colors.black,
                    fontSize: 14,
                  ),
                ),
              ),
              // Timestamp
              Text(timestamp, style: TextStyle(fontSize: 12, color: Colors.grey)),
            ],
          ),
        ),
        // Show avatar for sent messages (positioned on the right)
        isSent
            ? CircleAvatar(
                backgroundColor: Colors.grey[200],
                child: Text(sender[0], style: TextStyle(fontSize: 24)),
              )
            : SizedBox.shrink(),
      ],
    );
  }
}

// Create a data model to hold message details
class ChatMessageData {
  final String sender;
  final String message;
  final String timestamp;
  final bool isSent;

  ChatMessageData({
    required this.sender,
    required this.message,
    required this.timestamp,
    required this.isSent,
  });
}



class PaymentMethodSelector extends StatelessWidget {
  final Function(String) onPaymentSelected;
  PaymentMethodSelector({required this.onPaymentSelected});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text('Select Payment Method:'),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () {
                onPaymentSelected('Full Payment');
              },
              child: Text('Full Payment'),
            ),
            const SizedBox(width: 16),
            ElevatedButton(
              onPressed: () {
                onPaymentSelected('Half Payment');
              },
              child: Text('Half Payment'),
            ),
          ],
        ),
      ],
    );
  }
}







class ProfilePage extends StatelessWidget {
  final String email;
  final String name;

  const ProfilePage({Key? key, required this.email, required this.name}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Profile', style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.transparent,
        elevation: 0,
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF5A4FCF), Color(0xFFEF6DA1)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF5A4FCF), Color(0xFFEF6DA1)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              children: [
                const CircleAvatar(
                  radius: 60,
                  backgroundImage: NetworkImage(
                      'https://res.cloudinary.com/dfug69cus/raw/upload/v1733480794/AF1QipMaDAcS_SSbDJd2bJ8oku0MPdaq_H6bwIppAJhM_xiaaps'),
                ),
                const SizedBox(height: 20),
                Text(
                  name, // Display name
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 10),
                Text(
                  email, // Display email
                  style: const TextStyle(
                    fontSize: 16,
                    color: Colors.white70,
                  ),
                ),
                const SizedBox(height: 30),
                // "My Purchases" Section
                ListTile(
                  leading: const Icon(Icons.shopping_cart, color: Colors.white),
                  title: const Text(
                    'My Purchases',
                    style: TextStyle(color: Colors.white),
                  ),
                  trailing: const Text(
                    'View All',
                    style: TextStyle(color: Colors.white70),
                  ),
                  onTap: () {},
                ),
                const Divider(color: Colors.white30),

                // Sub-Purchase Options
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    _buildPurchaseOption(Icons.payment, 'To Pay'),
                    _buildPurchaseOption(Icons.local_shipping, 'To Ship'),
                    _buildPurchaseOption(Icons.inbox, 'To Receive', badge: true),
                    _buildPurchaseOption(Icons.star, 'To Rate'),
                  ],
                ),
                const SizedBox(height: 20),

                // Digital Purchases Section
                ListTile(
                  leading: const Icon(Icons.phone_android, color: Colors.white),
                  title: const Text(
                    'Digital Purchases',
                    style: TextStyle(color: Colors.white),
                  ),
                  onTap: () {},
                ),
                const Divider(color: Colors.white30),

                // Account Section
                ListTile(
                  leading: const Icon(Icons.person, color: Colors.white),
                  title: const Text(
                    'Account',
                    style: TextStyle(color: Colors.white),
                  ),
                  onTap: () {},
                ),
                const Divider(color: Colors.white30),

                // Log Out Button in ListTile
                ListTile(
                  leading: const Icon(Icons.logout, color: Colors.redAccent),
                  title: const Text(
                    'Log Out',
                    style: TextStyle(color: Colors.redAccent),
                  ),
                  onTap: () {
                    showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: const Text('Log Out'),
                        content: const Text('Are you sure you want to log out?'),
                        actions: [
                          TextButton(
                            onPressed: () => Navigator.pop(context), // Close dialog
                            child: const Text('Cancel'),
                          ),
                          TextButton(
                            onPressed: () {
                              Navigator.pop(context); // Close dialog
                              Navigator.pushAndRemoveUntil(
                                context,
                                MaterialPageRoute(builder: (context) => LoginScreen()),
                                (route) => false, // Clear navigation stack
                              );
                            },
                            child: const Text('Log Out'),
                          ),
                        ],
                      ),
                    );
                  },
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildPurchaseOption(IconData icon, String label, {bool badge = false}) {
    return Column(
      children: [
        Stack(
          children: [
            Icon(icon, size: 40, color: Colors.white),
            if (badge)
              Positioned(
                right: 0,
                top: 0,
                child: Container(
                  padding: const EdgeInsets.all(3),
                  decoration: BoxDecoration(
                    color: Colors.red,
                    shape: BoxShape.circle,
                  ),
                  child: const Text(
                    '1',
                    style: TextStyle(color: Colors.white, fontSize: 10),
                  ),
                ),
              ),
          ],
        ),
        const SizedBox(height: 5),
        Text(
          label,
          style: const TextStyle(color: Colors.white70),
        ),
      ],
    );
  }
}
